* Installation
To install it, copy paste the following contents in your terminal.
#+begin_src python3
python3 -m venv apiBSLEnv
source apiBSLEnv/bin/activate
pip install -r requirements.txt
#+end_src
To run it, simply do:
#+begin_src bash 
uvicorn main:app --reload 
#+end_src 

* Sign Recognition Endpoint
It takes the url of the image as input. The url can be a local file, an online file or even a minio image url.
#+begin_src json
{
	"sign_image_uri": "/home/abhijit/Downloads/KU-BdSL Khulna University Bengali Sign Language dataset/KU-BdSL/MSLD/2433/001af11864df4bf214f0a66aa2c11f91.jpg",
	"selected_model_name": "uwu"
}
#+end_src

It returns the sign detected, the probablity of the sign being the sign it has detected and an annotated image of the sign and keypoints.
#+begin_src json 
"Jha, 0.44424018263816833, /home/abhijit/Feature-Based-Video-Similarity-Detection/api/Jha.png"
#+end_src 

Note that, it has terrible performeance because the data is bad. We can fix it by making new data, easily. And it would not change the REST api in any manner so feel free to use this endpoint in your code. We will update our underlying model soon.

Additionally, frontend-backend interaction requires 2-3s to happen so the sign recognition no longer remains live. We need to think about it and find a way around it.

* Video Similarity Endpoint
It takes the url of the videos as input. The url can be a local file, an online file or even a minio image url.
#+begin_src json 
{
  "tutorial_uri": "/home/abhijit/Feature-Based-Video-Similarity-Detection/data-collection-and-training-area/demo.mkv",
  "performance_video_uri": "/home/abhijit/Feature-Based-Video-Similarity-Detection/data-collection-and-training-area/demo.mkv",
	"selected_model_name": "uwu"
}
#+end_src 

It returns a single floating point value - the similarity percentage between the videos.

Note that, opencv reads videos frame by frame. Meaning if a video is 1min and another video is 2min, opencv would take 3min to read the videos and 3min 2s to generate similarity score! So your request has to wait for 3 freaking minutes. For this reason, we think that we will write down the result in some file first. Frontend will fetch it from there after some time.

* Sign Image Similarity Endpoint
It takes the url of the images as input. The url can be a local file, an online file or even a minio image url.
#+begin_src json 
{
  "tutorial_uri": "/home/abhijit/Feature-Based-Video-Similarity-Detection/data-collection-and-training-area/demo.jpg",
  "performance_image_uri": "/home/abhijit/Feature-Based-Video-Similarity-Detection/data-collection-and-training-area/demo2.jpg",
  "selected_model_name": "uwu"
}
#+end_src 

It returns a single floating point value - the ~similarity percentage~ between the images. It is very fast.